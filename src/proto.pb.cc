// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Proto {
PROTOBUF_CONSTEXPR request::request(
    ::_pbi::ConstantInitialized)
  : gymid_()
  , _gymid_cached_byte_size_(0)
  , addstu_()
  , addlog_()
  , delstu_()
  , dellog_()
  , in_()
  , out_()
  , changestu_()
  , login_()
  , reg_()
  , setprice_()
  , function_(0)
  , table_name_(0)
  , uprice_(0){}
struct requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~requestDefaultTypeInternal() {}
  union {
    request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 requestDefaultTypeInternal _request_default_instance_;
PROTOBUF_CONSTEXPR response::response(
    ::_pbi::ConstantInitialized)
  : gymid_()
  , _gymid_cached_byte_size_(0)
  , stu_()
  , log_()
  , gyminfo_()
  , function_(0)
  , res_(false)
  , table_name_(0){}
struct responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~responseDefaultTypeInternal() {}
  union {
    response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 responseDefaultTypeInternal _response_default_instance_;
PROTOBUF_CONSTEXPR Gyminfo::Gyminfo(
    ::_pbi::ConstantInitialized)
  : gymid_()
  , _gymid_cached_byte_size_(0)
  , gymname_()
  , _gymname_cached_byte_size_(0)
  , position_()
  , _position_cached_byte_size_(0)
  , builttime_()
  , _builttime_cached_byte_size_(0)
  , password_()
  , _password_cached_byte_size_(0)
  , profit_(0)
  , fitness_(false)
  , basketball_(false)
  , badminton_(false)
  , swimming_(false)
  , bath_(false)
  , contest_(false)
  , uprice_(0){}
struct GyminfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GyminfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GyminfoDefaultTypeInternal() {}
  union {
    Gyminfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GyminfoDefaultTypeInternal _Gyminfo_default_instance_;
PROTOBUF_CONSTEXPR Student::Student(
    ::_pbi::ConstantInitialized)
  : uid_()
  , _uid_cached_byte_size_(0)
  , name_()
  , _name_cached_byte_size_(0)
  , st_time_()
  , _st_time_cached_byte_size_(0)
  , log_()
  , gender_(false)
  , age_(0)
  , balance_(0){}
struct StudentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StudentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StudentDefaultTypeInternal() {}
  union {
    Student _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StudentDefaultTypeInternal _Student_default_instance_;
PROTOBUF_CONSTEXPR Repairlog::Repairlog(
    ::_pbi::ConstantInitialized)
  : gymid_()
  , _gymid_cached_byte_size_(0)
  , time_()
  , _time_cached_byte_size_(0)
  , reason_()
  , _reason_cached_byte_size_(0)
  , uid_()
  , _uid_cached_byte_size_(0)
  , spend_(0){}
struct RepairlogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepairlogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepairlogDefaultTypeInternal() {}
  union {
    Repairlog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepairlogDefaultTypeInternal _Repairlog_default_instance_;
PROTOBUF_CONSTEXPR ChangePerson::ChangePerson(
    ::_pbi::ConstantInitialized)
  : uid_()
  , _uid_cached_byte_size_(0)
  , column_()
  , _column_cached_byte_size_(0)
  , value_()
  , _value_cached_byte_size_(0){}
struct ChangePersonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePersonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePersonDefaultTypeInternal() {}
  union {
    ChangePerson _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePersonDefaultTypeInternal _ChangePerson_default_instance_;
PROTOBUF_CONSTEXPR SetPrice::SetPrice(
    ::_pbi::ConstantInitialized)
  : gymid_()
  , _gymid_cached_byte_size_(0)
  , uprice_(0){}
struct SetPriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPriceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPriceDefaultTypeInternal() {}
  union {
    SetPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPriceDefaultTypeInternal _SetPrice_default_instance_;
}  // namespace Proto
static ::_pb::Metadata file_level_metadata_proto_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2eproto = nullptr;

const uint32_t TableStruct_proto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::request, function_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, table_name_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, gymid_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, addstu_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, addlog_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, delstu_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, dellog_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, in_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, out_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, changestu_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, uprice_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, login_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, reg_),
  PROTOBUF_FIELD_OFFSET(::Proto::request, setprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::response, function_),
  PROTOBUF_FIELD_OFFSET(::Proto::response, res_),
  PROTOBUF_FIELD_OFFSET(::Proto::response, table_name_),
  PROTOBUF_FIELD_OFFSET(::Proto::response, gymid_),
  PROTOBUF_FIELD_OFFSET(::Proto::response, stu_),
  PROTOBUF_FIELD_OFFSET(::Proto::response, log_),
  PROTOBUF_FIELD_OFFSET(::Proto::response, gyminfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, gymid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, gymname_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, position_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, builttime_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, profit_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, password_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, fitness_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, basketball_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, badminton_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, swimming_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, bath_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, contest_),
  PROTOBUF_FIELD_OFFSET(::Proto::Gyminfo, uprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Student, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Student, uid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Student, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::Student, gender_),
  PROTOBUF_FIELD_OFFSET(::Proto::Student, age_),
  PROTOBUF_FIELD_OFFSET(::Proto::Student, st_time_),
  PROTOBUF_FIELD_OFFSET(::Proto::Student, balance_),
  PROTOBUF_FIELD_OFFSET(::Proto::Student, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Repairlog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Repairlog, gymid_),
  PROTOBUF_FIELD_OFFSET(::Proto::Repairlog, time_),
  PROTOBUF_FIELD_OFFSET(::Proto::Repairlog, reason_),
  PROTOBUF_FIELD_OFFSET(::Proto::Repairlog, spend_),
  PROTOBUF_FIELD_OFFSET(::Proto::Repairlog, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ChangePerson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::ChangePerson, uid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ChangePerson, column_),
  PROTOBUF_FIELD_OFFSET(::Proto::ChangePerson, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SetPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::SetPrice, gymid_),
  PROTOBUF_FIELD_OFFSET(::Proto::SetPrice, uprice_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Proto::request)},
  { 20, -1, -1, sizeof(::Proto::response)},
  { 33, -1, -1, sizeof(::Proto::Gyminfo)},
  { 52, -1, -1, sizeof(::Proto::Student)},
  { 65, -1, -1, sizeof(::Proto::Repairlog)},
  { 76, -1, -1, sizeof(::Proto::ChangePerson)},
  { 85, -1, -1, sizeof(::Proto::SetPrice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Proto::_request_default_instance_._instance,
  &::Proto::_response_default_instance_._instance,
  &::Proto::_Gyminfo_default_instance_._instance,
  &::Proto::_Student_default_instance_._instance,
  &::Proto::_Repairlog_default_instance_._instance,
  &::Proto::_ChangePerson_default_instance_._instance,
  &::Proto::_SetPrice_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013proto.proto\022\005Proto\"\222\003\n\007request\022\020\n\010func"
  "tion\030\001 \001(\005\022\022\n\ntable_name\030\002 \001(\005\022\r\n\005gymid\030"
  "\003 \003(\005\022\036\n\006addstu\030\004 \003(\0132\016.Proto.Student\022 \n"
  "\006addlog\030\005 \003(\0132\020.Proto.Repairlog\022\036\n\006delst"
  "u\030\006 \003(\0132\016.Proto.Student\022 \n\006dellog\030\007 \003(\0132"
  "\020.Proto.Repairlog\022\032\n\002in\030\010 \003(\0132\016.Proto.St"
  "udent\022\033\n\003out\030\t \003(\0132\016.Proto.Student\022&\n\tch"
  "angestu\030\n \003(\0132\023.Proto.ChangePerson\022\016\n\006up"
  "rice\030\013 \001(\005\022\035\n\005login\030\014 \003(\0132\016.Proto.Gyminf"
  "o\022\033\n\003reg\030\r \003(\0132\016.Proto.Gyminfo\022!\n\010setpri"
  "ce\030\016 \003(\0132\017.Proto.SetPrice\"\251\001\n\010response\022\020"
  "\n\010function\030\001 \001(\005\022\013\n\003res\030\002 \001(\010\022\022\n\ntable_n"
  "ame\030\003 \001(\005\022\r\n\005gymid\030\004 \003(\005\022\033\n\003stu\030\005 \003(\0132\016."
  "Proto.Student\022\035\n\003log\030\006 \003(\0132\020.Proto.Repai"
  "rlog\022\037\n\007gyminfo\030\007 \003(\0132\016.Proto.Gyminfo\"\351\001"
  "\n\007Gyminfo\022\r\n\005gymid\030\001 \003(\005\022\017\n\007gymname\030\002 \003("
  "\005\022\020\n\010position\030\003 \003(\005\022\021\n\tbuilttime\030\004 \003(\005\022\016"
  "\n\006profit\030\005 \001(\005\022\020\n\010password\030\006 \003(\005\022\017\n\007fitn"
  "ess\030\007 \001(\010\022\022\n\nbasketball\030\010 \001(\010\022\021\n\tbadmint"
  "on\030\t \001(\010\022\020\n\010swimming\030\n \001(\010\022\014\n\004bath\030\013 \001(\010"
  "\022\017\n\007contest\030\014 \001(\010\022\016\n\006uprice\030\r \001(\005\"\202\001\n\007St"
  "udent\022\013\n\003uid\030\001 \003(\005\022\014\n\004name\030\002 \003(\005\022\016\n\006gend"
  "er\030\003 \001(\010\022\013\n\003age\030\004 \001(\005\022\017\n\007st_time\030\005 \003(\005\022\017"
  "\n\007balance\030\006 \001(\005\022\035\n\003log\030\007 \003(\0132\020.Proto.Rep"
  "airlog\"T\n\tRepairlog\022\r\n\005gymid\030\001 \003(\005\022\014\n\004ti"
  "me\030\002 \003(\005\022\016\n\006reason\030\003 \003(\005\022\r\n\005spend\030\004 \001(\005\022"
  "\013\n\003uid\030\005 \003(\005\":\n\014ChangePerson\022\013\n\003uid\030\001 \003("
  "\005\022\016\n\006column\030\002 \003(\005\022\r\n\005value\030\003 \003(\005\")\n\010SetP"
  "rice\022\r\n\005gymid\030\001 \003(\005\022\016\n\006uprice\030\002 \001(\005b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2eproto = {
    false, false, 1163, descriptor_table_protodef_proto_2eproto,
    "proto.proto",
    &descriptor_table_proto_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_proto_2eproto::offsets,
    file_level_metadata_proto_2eproto, file_level_enum_descriptors_proto_2eproto,
    file_level_service_descriptors_proto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2eproto_getter() {
  return &descriptor_table_proto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2eproto(&descriptor_table_proto_2eproto);
namespace Proto {

// ===================================================================

class request::_Internal {
 public:
};

request::request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gymid_(arena),
  addstu_(arena),
  addlog_(arena),
  delstu_(arena),
  dellog_(arena),
  in_(arena),
  out_(arena),
  changestu_(arena),
  login_(arena),
  reg_(arena),
  setprice_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.request)
}
request::request(const request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gymid_(from.gymid_),
      addstu_(from.addstu_),
      addlog_(from.addlog_),
      delstu_(from.delstu_),
      dellog_(from.dellog_),
      in_(from.in_),
      out_(from.out_),
      changestu_(from.changestu_),
      login_(from.login_),
      reg_(from.reg_),
      setprice_(from.setprice_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&function_, &from.function_,
    static_cast<size_t>(reinterpret_cast<char*>(&uprice_) -
    reinterpret_cast<char*>(&function_)) + sizeof(uprice_));
  // @@protoc_insertion_point(copy_constructor:Proto.request)
}

inline void request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uprice_) -
    reinterpret_cast<char*>(&function_)) + sizeof(uprice_));
}

request::~request() {
  // @@protoc_insertion_point(destructor:Proto.request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void request::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gymid_.Clear();
  addstu_.Clear();
  addlog_.Clear();
  delstu_.Clear();
  dellog_.Clear();
  in_.Clear();
  out_.Clear();
  changestu_.Clear();
  login_.Clear();
  reg_.Clear();
  setprice_.Clear();
  ::memset(&function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uprice_) -
      reinterpret_cast<char*>(&function_)) + sizeof(uprice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          table_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 gymid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gymid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_gymid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Student addstu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addstu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Repairlog addlog = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addlog(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Student delstu = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delstu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Repairlog dellog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dellog(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Student in = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Student out = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_out(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.ChangePerson changestu = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changestu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 uprice = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Gyminfo login = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_login(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Gyminfo reg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.SetPrice setprice = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_setprice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 function = 1;
  if (this->_internal_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_function(), target);
  }

  // int32 table_name = 2;
  if (this->_internal_table_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_name(), target);
  }

  // repeated int32 gymid = 3;
  {
    int byte_size = _gymid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_gymid(), byte_size, target);
    }
  }

  // repeated .Proto.Student addstu = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addstu_size()); i < n; i++) {
    const auto& repfield = this->_internal_addstu(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Repairlog addlog = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addlog_size()); i < n; i++) {
    const auto& repfield = this->_internal_addlog(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Student delstu = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delstu_size()); i < n; i++) {
    const auto& repfield = this->_internal_delstu(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Repairlog dellog = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dellog_size()); i < n; i++) {
    const auto& repfield = this->_internal_dellog(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Student in = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_in_size()); i < n; i++) {
    const auto& repfield = this->_internal_in(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Student out = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_out_size()); i < n; i++) {
    const auto& repfield = this->_internal_out(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.ChangePerson changestu = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_changestu_size()); i < n; i++) {
    const auto& repfield = this->_internal_changestu(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 uprice = 11;
  if (this->_internal_uprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_uprice(), target);
  }

  // repeated .Proto.Gyminfo login = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_login_size()); i < n; i++) {
    const auto& repfield = this->_internal_login(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Gyminfo reg = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reg_size()); i < n; i++) {
    const auto& repfield = this->_internal_reg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.SetPrice setprice = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_setprice_size()); i < n; i++) {
    const auto& repfield = this->_internal_setprice(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.request)
  return target;
}

size_t request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gymid = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->gymid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _gymid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Proto.Student addstu = 4;
  total_size += 1UL * this->_internal_addstu_size();
  for (const auto& msg : this->addstu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Repairlog addlog = 5;
  total_size += 1UL * this->_internal_addlog_size();
  for (const auto& msg : this->addlog_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Student delstu = 6;
  total_size += 1UL * this->_internal_delstu_size();
  for (const auto& msg : this->delstu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Repairlog dellog = 7;
  total_size += 1UL * this->_internal_dellog_size();
  for (const auto& msg : this->dellog_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Student in = 8;
  total_size += 1UL * this->_internal_in_size();
  for (const auto& msg : this->in_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Student out = 9;
  total_size += 1UL * this->_internal_out_size();
  for (const auto& msg : this->out_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.ChangePerson changestu = 10;
  total_size += 1UL * this->_internal_changestu_size();
  for (const auto& msg : this->changestu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Gyminfo login = 12;
  total_size += 1UL * this->_internal_login_size();
  for (const auto& msg : this->login_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Gyminfo reg = 13;
  total_size += 1UL * this->_internal_reg_size();
  for (const auto& msg : this->reg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.SetPrice setprice = 14;
  total_size += 1UL * this->_internal_setprice_size();
  for (const auto& msg : this->setprice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 function = 1;
  if (this->_internal_function() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_function());
  }

  // int32 table_name = 2;
  if (this->_internal_table_name() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_table_name());
  }

  // int32 uprice = 11;
  if (this->_internal_uprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uprice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*request::GetClassData() const { return &_class_data_; }

void request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<request *>(to)->MergeFrom(
      static_cast<const request &>(from));
}


void request::MergeFrom(const request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gymid_.MergeFrom(from.gymid_);
  addstu_.MergeFrom(from.addstu_);
  addlog_.MergeFrom(from.addlog_);
  delstu_.MergeFrom(from.delstu_);
  dellog_.MergeFrom(from.dellog_);
  in_.MergeFrom(from.in_);
  out_.MergeFrom(from.out_);
  changestu_.MergeFrom(from.changestu_);
  login_.MergeFrom(from.login_);
  reg_.MergeFrom(from.reg_);
  setprice_.MergeFrom(from.setprice_);
  if (from._internal_function() != 0) {
    _internal_set_function(from._internal_function());
  }
  if (from._internal_table_name() != 0) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_uprice() != 0) {
    _internal_set_uprice(from._internal_uprice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  return true;
}

void request::InternalSwap(request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gymid_.InternalSwap(&other->gymid_);
  addstu_.InternalSwap(&other->addstu_);
  addlog_.InternalSwap(&other->addlog_);
  delstu_.InternalSwap(&other->delstu_);
  dellog_.InternalSwap(&other->dellog_);
  in_.InternalSwap(&other->in_);
  out_.InternalSwap(&other->out_);
  changestu_.InternalSwap(&other->changestu_);
  login_.InternalSwap(&other->login_);
  reg_.InternalSwap(&other->reg_);
  setprice_.InternalSwap(&other->setprice_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(request, uprice_)
      + sizeof(request::uprice_)
      - PROTOBUF_FIELD_OFFSET(request, function_)>(
          reinterpret_cast<char*>(&function_),
          reinterpret_cast<char*>(&other->function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[0]);
}

// ===================================================================

class response::_Internal {
 public:
};

response::response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gymid_(arena),
  stu_(arena),
  log_(arena),
  gyminfo_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.response)
}
response::response(const response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gymid_(from.gymid_),
      stu_(from.stu_),
      log_(from.log_),
      gyminfo_(from.gyminfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&function_, &from.function_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_name_) -
    reinterpret_cast<char*>(&function_)) + sizeof(table_name_));
  // @@protoc_insertion_point(copy_constructor:Proto.response)
}

inline void response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_name_) -
    reinterpret_cast<char*>(&function_)) + sizeof(table_name_));
}

response::~response() {
  // @@protoc_insertion_point(destructor:Proto.response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void response::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gymid_.Clear();
  stu_.Clear();
  log_.Clear();
  gyminfo_.Clear();
  ::memset(&function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_name_) -
      reinterpret_cast<char*>(&function_)) + sizeof(table_name_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          table_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 gymid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gymid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_gymid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Student stu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Repairlog log = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Gyminfo gyminfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gyminfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 function = 1;
  if (this->_internal_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_function(), target);
  }

  // bool res = 2;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_res(), target);
  }

  // int32 table_name = 3;
  if (this->_internal_table_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_table_name(), target);
  }

  // repeated int32 gymid = 4;
  {
    int byte_size = _gymid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_gymid(), byte_size, target);
    }
  }

  // repeated .Proto.Student stu = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stu_size()); i < n; i++) {
    const auto& repfield = this->_internal_stu(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Repairlog log = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_log_size()); i < n; i++) {
    const auto& repfield = this->_internal_log(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Proto.Gyminfo gyminfo = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gyminfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_gyminfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.response)
  return target;
}

size_t response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gymid = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->gymid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _gymid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Proto.Student stu = 5;
  total_size += 1UL * this->_internal_stu_size();
  for (const auto& msg : this->stu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Repairlog log = 6;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.Gyminfo gyminfo = 7;
  total_size += 1UL * this->_internal_gyminfo_size();
  for (const auto& msg : this->gyminfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 function = 1;
  if (this->_internal_function() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_function());
  }

  // bool res = 2;
  if (this->_internal_res() != 0) {
    total_size += 1 + 1;
  }

  // int32 table_name = 3;
  if (this->_internal_table_name() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*response::GetClassData() const { return &_class_data_; }

void response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<response *>(to)->MergeFrom(
      static_cast<const response &>(from));
}


void response::MergeFrom(const response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gymid_.MergeFrom(from.gymid_);
  stu_.MergeFrom(from.stu_);
  log_.MergeFrom(from.log_);
  gyminfo_.MergeFrom(from.gyminfo_);
  if (from._internal_function() != 0) {
    _internal_set_function(from._internal_function());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  if (from._internal_table_name() != 0) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void response::CopyFrom(const response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool response::IsInitialized() const {
  return true;
}

void response::InternalSwap(response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gymid_.InternalSwap(&other->gymid_);
  stu_.InternalSwap(&other->stu_);
  log_.InternalSwap(&other->log_);
  gyminfo_.InternalSwap(&other->gyminfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(response, table_name_)
      + sizeof(response::table_name_)
      - PROTOBUF_FIELD_OFFSET(response, function_)>(
          reinterpret_cast<char*>(&function_),
          reinterpret_cast<char*>(&other->function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[1]);
}

// ===================================================================

class Gyminfo::_Internal {
 public:
};

Gyminfo::Gyminfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gymid_(arena),
  gymname_(arena),
  position_(arena),
  builttime_(arena),
  password_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.Gyminfo)
}
Gyminfo::Gyminfo(const Gyminfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gymid_(from.gymid_),
      gymname_(from.gymname_),
      position_(from.position_),
      builttime_(from.builttime_),
      password_(from.password_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&profit_, &from.profit_,
    static_cast<size_t>(reinterpret_cast<char*>(&uprice_) -
    reinterpret_cast<char*>(&profit_)) + sizeof(uprice_));
  // @@protoc_insertion_point(copy_constructor:Proto.Gyminfo)
}

inline void Gyminfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uprice_) -
    reinterpret_cast<char*>(&profit_)) + sizeof(uprice_));
}

Gyminfo::~Gyminfo() {
  // @@protoc_insertion_point(destructor:Proto.Gyminfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gyminfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gyminfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Gyminfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Gyminfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gymid_.Clear();
  gymname_.Clear();
  position_.Clear();
  builttime_.Clear();
  password_.Clear();
  ::memset(&profit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uprice_) -
      reinterpret_cast<char*>(&profit_)) + sizeof(uprice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gyminfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 gymid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gymid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_gymid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 gymname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gymname(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_gymname(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 builttime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_builttime(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_builttime(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 profit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          profit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_password(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_password(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fitness = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          fitness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool basketball = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          basketball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool badminton = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          badminton_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool swimming = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          swimming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bath = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          bath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool contest = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          contest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uprice = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gyminfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Gyminfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gymid = 1;
  {
    int byte_size = _gymid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gymid(), byte_size, target);
    }
  }

  // repeated int32 gymname = 2;
  {
    int byte_size = _gymname_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_gymname(), byte_size, target);
    }
  }

  // repeated int32 position = 3;
  {
    int byte_size = _position_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_position(), byte_size, target);
    }
  }

  // repeated int32 builttime = 4;
  {
    int byte_size = _builttime_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_builttime(), byte_size, target);
    }
  }

  // int32 profit = 5;
  if (this->_internal_profit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_profit(), target);
  }

  // repeated int32 password = 6;
  {
    int byte_size = _password_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_password(), byte_size, target);
    }
  }

  // bool fitness = 7;
  if (this->_internal_fitness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_fitness(), target);
  }

  // bool basketball = 8;
  if (this->_internal_basketball() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_basketball(), target);
  }

  // bool badminton = 9;
  if (this->_internal_badminton() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_badminton(), target);
  }

  // bool swimming = 10;
  if (this->_internal_swimming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_swimming(), target);
  }

  // bool bath = 11;
  if (this->_internal_bath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bath(), target);
  }

  // bool contest = 12;
  if (this->_internal_contest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_contest(), target);
  }

  // int32 uprice = 13;
  if (this->_internal_uprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_uprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Gyminfo)
  return target;
}

size_t Gyminfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Gyminfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gymid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->gymid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _gymid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 gymname = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->gymname_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _gymname_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 position = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->position_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 builttime = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->builttime_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _builttime_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 password = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->password_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _password_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 profit = 5;
  if (this->_internal_profit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_profit());
  }

  // bool fitness = 7;
  if (this->_internal_fitness() != 0) {
    total_size += 1 + 1;
  }

  // bool basketball = 8;
  if (this->_internal_basketball() != 0) {
    total_size += 1 + 1;
  }

  // bool badminton = 9;
  if (this->_internal_badminton() != 0) {
    total_size += 1 + 1;
  }

  // bool swimming = 10;
  if (this->_internal_swimming() != 0) {
    total_size += 1 + 1;
  }

  // bool bath = 11;
  if (this->_internal_bath() != 0) {
    total_size += 1 + 1;
  }

  // bool contest = 12;
  if (this->_internal_contest() != 0) {
    total_size += 1 + 1;
  }

  // int32 uprice = 13;
  if (this->_internal_uprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uprice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gyminfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gyminfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gyminfo::GetClassData() const { return &_class_data_; }

void Gyminfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gyminfo *>(to)->MergeFrom(
      static_cast<const Gyminfo &>(from));
}


void Gyminfo::MergeFrom(const Gyminfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Gyminfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gymid_.MergeFrom(from.gymid_);
  gymname_.MergeFrom(from.gymname_);
  position_.MergeFrom(from.position_);
  builttime_.MergeFrom(from.builttime_);
  password_.MergeFrom(from.password_);
  if (from._internal_profit() != 0) {
    _internal_set_profit(from._internal_profit());
  }
  if (from._internal_fitness() != 0) {
    _internal_set_fitness(from._internal_fitness());
  }
  if (from._internal_basketball() != 0) {
    _internal_set_basketball(from._internal_basketball());
  }
  if (from._internal_badminton() != 0) {
    _internal_set_badminton(from._internal_badminton());
  }
  if (from._internal_swimming() != 0) {
    _internal_set_swimming(from._internal_swimming());
  }
  if (from._internal_bath() != 0) {
    _internal_set_bath(from._internal_bath());
  }
  if (from._internal_contest() != 0) {
    _internal_set_contest(from._internal_contest());
  }
  if (from._internal_uprice() != 0) {
    _internal_set_uprice(from._internal_uprice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gyminfo::CopyFrom(const Gyminfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Gyminfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyminfo::IsInitialized() const {
  return true;
}

void Gyminfo::InternalSwap(Gyminfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gymid_.InternalSwap(&other->gymid_);
  gymname_.InternalSwap(&other->gymname_);
  position_.InternalSwap(&other->position_);
  builttime_.InternalSwap(&other->builttime_);
  password_.InternalSwap(&other->password_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gyminfo, uprice_)
      + sizeof(Gyminfo::uprice_)
      - PROTOBUF_FIELD_OFFSET(Gyminfo, profit_)>(
          reinterpret_cast<char*>(&profit_),
          reinterpret_cast<char*>(&other->profit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gyminfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[2]);
}

// ===================================================================

class Student::_Internal {
 public:
};

Student::Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uid_(arena),
  name_(arena),
  st_time_(arena),
  log_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.Student)
}
Student::Student(const Student& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uid_(from.uid_),
      name_(from.name_),
      st_time_(from.st_time_),
      log_(from.log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:Proto.Student)
}

inline void Student::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(balance_));
}

Student::~Student() {
  // @@protoc_insertion_point(destructor:Proto.Student)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Student::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Student::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Student::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Student)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  name_.Clear();
  st_time_.Clear();
  log_.Clear();
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Student::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_name(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 st_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_st_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_st_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Repairlog log = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Student::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Student)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uid = 1;
  {
    int byte_size = _uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uid(), byte_size, target);
    }
  }

  // repeated int32 name = 2;
  {
    int byte_size = _name_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_name(), byte_size, target);
    }
  }

  // bool gender = 3;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_gender(), target);
  }

  // int32 age = 4;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_age(), target);
  }

  // repeated int32 st_time = 5;
  {
    int byte_size = _st_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_st_time(), byte_size, target);
    }
  }

  // int32 balance = 6;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_balance(), target);
  }

  // repeated .Proto.Repairlog log = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_log_size()); i < n; i++) {
    const auto& repfield = this->_internal_log(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Student)
  return target;
}

size_t Student::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Student)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 name = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->name_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _name_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 st_time = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->st_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _st_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Proto.Repairlog log = 7;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool gender = 3;
  if (this->_internal_gender() != 0) {
    total_size += 1 + 1;
  }

  // int32 age = 4;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int32 balance = 6;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Student::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Student::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Student::GetClassData() const { return &_class_data_; }

void Student::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Student *>(to)->MergeFrom(
      static_cast<const Student &>(from));
}


void Student::MergeFrom(const Student& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Student)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  name_.MergeFrom(from.name_);
  st_time_.MergeFrom(from.st_time_);
  log_.MergeFrom(from.log_);
  if (from._internal_gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Student::CopyFrom(const Student& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Student)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Student::IsInitialized() const {
  return true;
}

void Student::InternalSwap(Student* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
  name_.InternalSwap(&other->name_);
  st_time_.InternalSwap(&other->st_time_);
  log_.InternalSwap(&other->log_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Student, balance_)
      + sizeof(Student::balance_)
      - PROTOBUF_FIELD_OFFSET(Student, gender_)>(
          reinterpret_cast<char*>(&gender_),
          reinterpret_cast<char*>(&other->gender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Student::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[3]);
}

// ===================================================================

class Repairlog::_Internal {
 public:
};

Repairlog::Repairlog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gymid_(arena),
  time_(arena),
  reason_(arena),
  uid_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.Repairlog)
}
Repairlog::Repairlog(const Repairlog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gymid_(from.gymid_),
      time_(from.time_),
      reason_(from.reason_),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spend_ = from.spend_;
  // @@protoc_insertion_point(copy_constructor:Proto.Repairlog)
}

inline void Repairlog::SharedCtor() {
spend_ = 0;
}

Repairlog::~Repairlog() {
  // @@protoc_insertion_point(destructor:Proto.Repairlog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Repairlog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Repairlog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repairlog::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Repairlog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gymid_.Clear();
  time_.Clear();
  reason_.Clear();
  uid_.Clear();
  spend_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repairlog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 gymid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gymid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_gymid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_reason(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_reason(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 spend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          spend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Repairlog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Repairlog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gymid = 1;
  {
    int byte_size = _gymid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gymid(), byte_size, target);
    }
  }

  // repeated int32 time = 2;
  {
    int byte_size = _time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_time(), byte_size, target);
    }
  }

  // repeated int32 reason = 3;
  {
    int byte_size = _reason_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_reason(), byte_size, target);
    }
  }

  // int32 spend = 4;
  if (this->_internal_spend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_spend(), target);
  }

  // repeated int32 uid = 5;
  {
    int byte_size = _uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_uid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Repairlog)
  return target;
}

size_t Repairlog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Repairlog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gymid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->gymid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _gymid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 time = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->time_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 reason = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->reason_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _reason_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 uid = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 spend = 4;
  if (this->_internal_spend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spend());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Repairlog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Repairlog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Repairlog::GetClassData() const { return &_class_data_; }

void Repairlog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Repairlog *>(to)->MergeFrom(
      static_cast<const Repairlog &>(from));
}


void Repairlog::MergeFrom(const Repairlog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Repairlog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gymid_.MergeFrom(from.gymid_);
  time_.MergeFrom(from.time_);
  reason_.MergeFrom(from.reason_);
  uid_.MergeFrom(from.uid_);
  if (from._internal_spend() != 0) {
    _internal_set_spend(from._internal_spend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Repairlog::CopyFrom(const Repairlog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Repairlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repairlog::IsInitialized() const {
  return true;
}

void Repairlog::InternalSwap(Repairlog* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gymid_.InternalSwap(&other->gymid_);
  time_.InternalSwap(&other->time_);
  reason_.InternalSwap(&other->reason_);
  uid_.InternalSwap(&other->uid_);
  swap(spend_, other->spend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Repairlog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[4]);
}

// ===================================================================

class ChangePerson::_Internal {
 public:
};

ChangePerson::ChangePerson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uid_(arena),
  column_(arena),
  value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.ChangePerson)
}
ChangePerson::ChangePerson(const ChangePerson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uid_(from.uid_),
      column_(from.column_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.ChangePerson)
}

inline void ChangePerson::SharedCtor() {
}

ChangePerson::~ChangePerson() {
  // @@protoc_insertion_point(destructor:Proto.ChangePerson)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangePerson::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangePerson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangePerson::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ChangePerson)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  column_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePerson::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_column(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangePerson::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ChangePerson)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 uid = 1;
  {
    int byte_size = _uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uid(), byte_size, target);
    }
  }

  // repeated int32 column = 2;
  {
    int byte_size = _column_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_column(), byte_size, target);
    }
  }

  // repeated int32 value = 3;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ChangePerson)
  return target;
}

size_t ChangePerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ChangePerson)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 column = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->column_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _column_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 value = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangePerson::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangePerson::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangePerson::GetClassData() const { return &_class_data_; }

void ChangePerson::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangePerson *>(to)->MergeFrom(
      static_cast<const ChangePerson &>(from));
}


void ChangePerson::MergeFrom(const ChangePerson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ChangePerson)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  column_.MergeFrom(from.column_);
  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePerson::CopyFrom(const ChangePerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ChangePerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePerson::IsInitialized() const {
  return true;
}

void ChangePerson::InternalSwap(ChangePerson* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
  column_.InternalSwap(&other->column_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePerson::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[5]);
}

// ===================================================================

class SetPrice::_Internal {
 public:
};

SetPrice::SetPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gymid_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Proto.SetPrice)
}
SetPrice::SetPrice(const SetPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gymid_(from.gymid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uprice_ = from.uprice_;
  // @@protoc_insertion_point(copy_constructor:Proto.SetPrice)
}

inline void SetPrice::SharedCtor() {
uprice_ = 0;
}

SetPrice::~SetPrice() {
  // @@protoc_insertion_point(destructor:Proto.SetPrice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SetPrice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gymid_.Clear();
  uprice_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPrice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 gymid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gymid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_gymid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uprice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPrice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SetPrice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gymid = 1;
  {
    int byte_size = _gymid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gymid(), byte_size, target);
    }
  }

  // int32 uprice = 2;
  if (this->_internal_uprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_uprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SetPrice)
  return target;
}

size_t SetPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SetPrice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gymid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->gymid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _gymid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 uprice = 2;
  if (this->_internal_uprice() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uprice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPrice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPrice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPrice::GetClassData() const { return &_class_data_; }

void SetPrice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPrice *>(to)->MergeFrom(
      static_cast<const SetPrice &>(from));
}


void SetPrice::MergeFrom(const SetPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SetPrice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gymid_.MergeFrom(from.gymid_);
  if (from._internal_uprice() != 0) {
    _internal_set_uprice(from._internal_uprice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPrice::CopyFrom(const SetPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SetPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPrice::IsInitialized() const {
  return true;
}

void SetPrice::InternalSwap(SetPrice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gymid_.InternalSwap(&other->gymid_);
  swap(uprice_, other->uprice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPrice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2eproto_getter, &descriptor_table_proto_2eproto_once,
      file_level_metadata_proto_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::request*
Arena::CreateMaybeMessage< ::Proto::request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::request >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::response*
Arena::CreateMaybeMessage< ::Proto::response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::response >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Gyminfo*
Arena::CreateMaybeMessage< ::Proto::Gyminfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Gyminfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Student*
Arena::CreateMaybeMessage< ::Proto::Student >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Student >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Repairlog*
Arena::CreateMaybeMessage< ::Proto::Repairlog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Repairlog >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ChangePerson*
Arena::CreateMaybeMessage< ::Proto::ChangePerson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::ChangePerson >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SetPrice*
Arena::CreateMaybeMessage< ::Proto::SetPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::SetPrice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
