// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2eproto;
namespace Proto {
class ChangePerson;
struct ChangePersonDefaultTypeInternal;
extern ChangePersonDefaultTypeInternal _ChangePerson_default_instance_;
class Gyminfo;
struct GyminfoDefaultTypeInternal;
extern GyminfoDefaultTypeInternal _Gyminfo_default_instance_;
class Repairlog;
struct RepairlogDefaultTypeInternal;
extern RepairlogDefaultTypeInternal _Repairlog_default_instance_;
class SetPrice;
struct SetPriceDefaultTypeInternal;
extern SetPriceDefaultTypeInternal _SetPrice_default_instance_;
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class request;
struct requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
struct responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::ChangePerson* Arena::CreateMaybeMessage<::Proto::ChangePerson>(Arena*);
template<> ::Proto::Gyminfo* Arena::CreateMaybeMessage<::Proto::Gyminfo>(Arena*);
template<> ::Proto::Repairlog* Arena::CreateMaybeMessage<::Proto::Repairlog>(Arena*);
template<> ::Proto::SetPrice* Arena::CreateMaybeMessage<::Proto::SetPrice>(Arena*);
template<> ::Proto::Student* Arena::CreateMaybeMessage<::Proto::Student>(Arena*);
template<> ::Proto::request* Arena::CreateMaybeMessage<::Proto::request>(Arena*);
template<> ::Proto::response* Arena::CreateMaybeMessage<::Proto::response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

// ===================================================================

class request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.request) */ {
 public:
  inline request() : request(nullptr) {}
  ~request() override;
  explicit PROTOBUF_CONSTEXPR request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const request& default_instance() {
    return *internal_default_instance();
  }
  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.request";
  }
  protected:
  explicit request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGymidFieldNumber = 3,
    kAddstuFieldNumber = 4,
    kAddlogFieldNumber = 5,
    kDelstuFieldNumber = 6,
    kDellogFieldNumber = 7,
    kInFieldNumber = 8,
    kOutFieldNumber = 9,
    kChangestuFieldNumber = 10,
    kLoginFieldNumber = 12,
    kRegFieldNumber = 13,
    kSetpriceFieldNumber = 14,
    kFunctionFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kUpriceFieldNumber = 11,
  };
  // repeated int32 gymid = 3;
  int gymid_size() const;
  private:
  int _internal_gymid_size() const;
  public:
  void clear_gymid();
  private:
  int32_t _internal_gymid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gymid() const;
  void _internal_add_gymid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gymid();
  public:
  int32_t gymid(int index) const;
  void set_gymid(int index, int32_t value);
  void add_gymid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gymid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gymid();

  // repeated .Proto.Student addstu = 4;
  int addstu_size() const;
  private:
  int _internal_addstu_size() const;
  public:
  void clear_addstu();
  ::Proto::Student* mutable_addstu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
      mutable_addstu();
  private:
  const ::Proto::Student& _internal_addstu(int index) const;
  ::Proto::Student* _internal_add_addstu();
  public:
  const ::Proto::Student& addstu(int index) const;
  ::Proto::Student* add_addstu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
      addstu() const;

  // repeated .Proto.Repairlog addlog = 5;
  int addlog_size() const;
  private:
  int _internal_addlog_size() const;
  public:
  void clear_addlog();
  ::Proto::Repairlog* mutable_addlog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
      mutable_addlog();
  private:
  const ::Proto::Repairlog& _internal_addlog(int index) const;
  ::Proto::Repairlog* _internal_add_addlog();
  public:
  const ::Proto::Repairlog& addlog(int index) const;
  ::Proto::Repairlog* add_addlog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
      addlog() const;

  // repeated .Proto.Student delstu = 6;
  int delstu_size() const;
  private:
  int _internal_delstu_size() const;
  public:
  void clear_delstu();
  ::Proto::Student* mutable_delstu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
      mutable_delstu();
  private:
  const ::Proto::Student& _internal_delstu(int index) const;
  ::Proto::Student* _internal_add_delstu();
  public:
  const ::Proto::Student& delstu(int index) const;
  ::Proto::Student* add_delstu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
      delstu() const;

  // repeated .Proto.Repairlog dellog = 7;
  int dellog_size() const;
  private:
  int _internal_dellog_size() const;
  public:
  void clear_dellog();
  ::Proto::Repairlog* mutable_dellog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
      mutable_dellog();
  private:
  const ::Proto::Repairlog& _internal_dellog(int index) const;
  ::Proto::Repairlog* _internal_add_dellog();
  public:
  const ::Proto::Repairlog& dellog(int index) const;
  ::Proto::Repairlog* add_dellog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
      dellog() const;

  // repeated .Proto.Student in = 8;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  ::Proto::Student* mutable_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
      mutable_in();
  private:
  const ::Proto::Student& _internal_in(int index) const;
  ::Proto::Student* _internal_add_in();
  public:
  const ::Proto::Student& in(int index) const;
  ::Proto::Student* add_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
      in() const;

  // repeated .Proto.Student out = 9;
  int out_size() const;
  private:
  int _internal_out_size() const;
  public:
  void clear_out();
  ::Proto::Student* mutable_out(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
      mutable_out();
  private:
  const ::Proto::Student& _internal_out(int index) const;
  ::Proto::Student* _internal_add_out();
  public:
  const ::Proto::Student& out(int index) const;
  ::Proto::Student* add_out();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
      out() const;

  // repeated .Proto.ChangePerson changestu = 10;
  int changestu_size() const;
  private:
  int _internal_changestu_size() const;
  public:
  void clear_changestu();
  ::Proto::ChangePerson* mutable_changestu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ChangePerson >*
      mutable_changestu();
  private:
  const ::Proto::ChangePerson& _internal_changestu(int index) const;
  ::Proto::ChangePerson* _internal_add_changestu();
  public:
  const ::Proto::ChangePerson& changestu(int index) const;
  ::Proto::ChangePerson* add_changestu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ChangePerson >&
      changestu() const;

  // repeated .Proto.Gyminfo login = 12;
  int login_size() const;
  private:
  int _internal_login_size() const;
  public:
  void clear_login();
  ::Proto::Gyminfo* mutable_login(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >*
      mutable_login();
  private:
  const ::Proto::Gyminfo& _internal_login(int index) const;
  ::Proto::Gyminfo* _internal_add_login();
  public:
  const ::Proto::Gyminfo& login(int index) const;
  ::Proto::Gyminfo* add_login();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >&
      login() const;

  // repeated .Proto.Gyminfo reg = 13;
  int reg_size() const;
  private:
  int _internal_reg_size() const;
  public:
  void clear_reg();
  ::Proto::Gyminfo* mutable_reg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >*
      mutable_reg();
  private:
  const ::Proto::Gyminfo& _internal_reg(int index) const;
  ::Proto::Gyminfo* _internal_add_reg();
  public:
  const ::Proto::Gyminfo& reg(int index) const;
  ::Proto::Gyminfo* add_reg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >&
      reg() const;

  // repeated .Proto.SetPrice setprice = 14;
  int setprice_size() const;
  private:
  int _internal_setprice_size() const;
  public:
  void clear_setprice();
  ::Proto::SetPrice* mutable_setprice(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SetPrice >*
      mutable_setprice();
  private:
  const ::Proto::SetPrice& _internal_setprice(int index) const;
  ::Proto::SetPrice* _internal_add_setprice();
  public:
  const ::Proto::SetPrice& setprice(int index) const;
  ::Proto::SetPrice* add_setprice();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SetPrice >&
      setprice() const;

  // int32 function = 1;
  void clear_function();
  int32_t function() const;
  void set_function(int32_t value);
  private:
  int32_t _internal_function() const;
  void _internal_set_function(int32_t value);
  public:

  // int32 table_name = 2;
  void clear_table_name();
  int32_t table_name() const;
  void set_table_name(int32_t value);
  private:
  int32_t _internal_table_name() const;
  void _internal_set_table_name(int32_t value);
  public:

  // int32 uprice = 11;
  void clear_uprice();
  int32_t uprice() const;
  void set_uprice(int32_t value);
  private:
  int32_t _internal_uprice() const;
  void _internal_set_uprice(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gymid_;
  mutable std::atomic<int> _gymid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student > addstu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog > addlog_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student > delstu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog > dellog_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student > out_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ChangePerson > changestu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo > login_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo > reg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SetPrice > setprice_;
  int32_t function_;
  int32_t table_name_;
  int32_t uprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.response) */ {
 public:
  inline response() : response(nullptr) {}
  ~response() override;
  explicit PROTOBUF_CONSTEXPR response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  response(const response& from);
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  inline response& operator=(response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const response& default_instance() {
    return *internal_default_instance();
  }
  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }
  inline void Swap(response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.response";
  }
  protected:
  explicit response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGymidFieldNumber = 4,
    kStuFieldNumber = 5,
    kLogFieldNumber = 6,
    kGyminfoFieldNumber = 7,
    kFunctionFieldNumber = 1,
    kResFieldNumber = 2,
    kTableNameFieldNumber = 3,
  };
  // repeated int32 gymid = 4;
  int gymid_size() const;
  private:
  int _internal_gymid_size() const;
  public:
  void clear_gymid();
  private:
  int32_t _internal_gymid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gymid() const;
  void _internal_add_gymid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gymid();
  public:
  int32_t gymid(int index) const;
  void set_gymid(int index, int32_t value);
  void add_gymid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gymid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gymid();

  // repeated .Proto.Student stu = 5;
  int stu_size() const;
  private:
  int _internal_stu_size() const;
  public:
  void clear_stu();
  ::Proto::Student* mutable_stu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
      mutable_stu();
  private:
  const ::Proto::Student& _internal_stu(int index) const;
  ::Proto::Student* _internal_add_stu();
  public:
  const ::Proto::Student& stu(int index) const;
  ::Proto::Student* add_stu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
      stu() const;

  // repeated .Proto.Repairlog log = 6;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::Proto::Repairlog* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
      mutable_log();
  private:
  const ::Proto::Repairlog& _internal_log(int index) const;
  ::Proto::Repairlog* _internal_add_log();
  public:
  const ::Proto::Repairlog& log(int index) const;
  ::Proto::Repairlog* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
      log() const;

  // repeated .Proto.Gyminfo gyminfo = 7;
  int gyminfo_size() const;
  private:
  int _internal_gyminfo_size() const;
  public:
  void clear_gyminfo();
  ::Proto::Gyminfo* mutable_gyminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >*
      mutable_gyminfo();
  private:
  const ::Proto::Gyminfo& _internal_gyminfo(int index) const;
  ::Proto::Gyminfo* _internal_add_gyminfo();
  public:
  const ::Proto::Gyminfo& gyminfo(int index) const;
  ::Proto::Gyminfo* add_gyminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >&
      gyminfo() const;

  // int32 function = 1;
  void clear_function();
  int32_t function() const;
  void set_function(int32_t value);
  private:
  int32_t _internal_function() const;
  void _internal_set_function(int32_t value);
  public:

  // bool res = 2;
  void clear_res();
  bool res() const;
  void set_res(bool value);
  private:
  bool _internal_res() const;
  void _internal_set_res(bool value);
  public:

  // int32 table_name = 3;
  void clear_table_name();
  int32_t table_name() const;
  void set_table_name(int32_t value);
  private:
  int32_t _internal_table_name() const;
  void _internal_set_table_name(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gymid_;
  mutable std::atomic<int> _gymid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student > stu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog > log_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo > gyminfo_;
  int32_t function_;
  bool res_;
  int32_t table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class Gyminfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Gyminfo) */ {
 public:
  inline Gyminfo() : Gyminfo(nullptr) {}
  ~Gyminfo() override;
  explicit PROTOBUF_CONSTEXPR Gyminfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gyminfo(const Gyminfo& from);
  Gyminfo(Gyminfo&& from) noexcept
    : Gyminfo() {
    *this = ::std::move(from);
  }

  inline Gyminfo& operator=(const Gyminfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gyminfo& operator=(Gyminfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gyminfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gyminfo* internal_default_instance() {
    return reinterpret_cast<const Gyminfo*>(
               &_Gyminfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Gyminfo& a, Gyminfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Gyminfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gyminfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gyminfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gyminfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gyminfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gyminfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gyminfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Gyminfo";
  }
  protected:
  explicit Gyminfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGymidFieldNumber = 1,
    kGymnameFieldNumber = 2,
    kPositionFieldNumber = 3,
    kBuilttimeFieldNumber = 4,
    kPasswordFieldNumber = 6,
    kProfitFieldNumber = 5,
    kFitnessFieldNumber = 7,
    kBasketballFieldNumber = 8,
    kBadmintonFieldNumber = 9,
    kSwimmingFieldNumber = 10,
    kBathFieldNumber = 11,
    kContestFieldNumber = 12,
    kUpriceFieldNumber = 13,
  };
  // repeated int32 gymid = 1;
  int gymid_size() const;
  private:
  int _internal_gymid_size() const;
  public:
  void clear_gymid();
  private:
  int32_t _internal_gymid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gymid() const;
  void _internal_add_gymid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gymid();
  public:
  int32_t gymid(int index) const;
  void set_gymid(int index, int32_t value);
  void add_gymid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gymid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gymid();

  // repeated int32 gymname = 2;
  int gymname_size() const;
  private:
  int _internal_gymname_size() const;
  public:
  void clear_gymname();
  private:
  int32_t _internal_gymname(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gymname() const;
  void _internal_add_gymname(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gymname();
  public:
  int32_t gymname(int index) const;
  void set_gymname(int index, int32_t value);
  void add_gymname(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gymname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gymname();

  // repeated int32 position = 3;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  int32_t _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_position() const;
  void _internal_add_position(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_position();
  public:
  int32_t position(int index) const;
  void set_position(int index, int32_t value);
  void add_position(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_position();

  // repeated int32 builttime = 4;
  int builttime_size() const;
  private:
  int _internal_builttime_size() const;
  public:
  void clear_builttime();
  private:
  int32_t _internal_builttime(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_builttime() const;
  void _internal_add_builttime(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_builttime();
  public:
  int32_t builttime(int index) const;
  void set_builttime(int index, int32_t value);
  void add_builttime(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      builttime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_builttime();

  // repeated int32 password = 6;
  int password_size() const;
  private:
  int _internal_password_size() const;
  public:
  void clear_password();
  private:
  int32_t _internal_password(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_password() const;
  void _internal_add_password(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_password();
  public:
  int32_t password(int index) const;
  void set_password(int index, int32_t value);
  void add_password(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      password() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_password();

  // int32 profit = 5;
  void clear_profit();
  int32_t profit() const;
  void set_profit(int32_t value);
  private:
  int32_t _internal_profit() const;
  void _internal_set_profit(int32_t value);
  public:

  // bool fitness = 7;
  void clear_fitness();
  bool fitness() const;
  void set_fitness(bool value);
  private:
  bool _internal_fitness() const;
  void _internal_set_fitness(bool value);
  public:

  // bool basketball = 8;
  void clear_basketball();
  bool basketball() const;
  void set_basketball(bool value);
  private:
  bool _internal_basketball() const;
  void _internal_set_basketball(bool value);
  public:

  // bool badminton = 9;
  void clear_badminton();
  bool badminton() const;
  void set_badminton(bool value);
  private:
  bool _internal_badminton() const;
  void _internal_set_badminton(bool value);
  public:

  // bool swimming = 10;
  void clear_swimming();
  bool swimming() const;
  void set_swimming(bool value);
  private:
  bool _internal_swimming() const;
  void _internal_set_swimming(bool value);
  public:

  // bool bath = 11;
  void clear_bath();
  bool bath() const;
  void set_bath(bool value);
  private:
  bool _internal_bath() const;
  void _internal_set_bath(bool value);
  public:

  // bool contest = 12;
  void clear_contest();
  bool contest() const;
  void set_contest(bool value);
  private:
  bool _internal_contest() const;
  void _internal_set_contest(bool value);
  public:

  // int32 uprice = 13;
  void clear_uprice();
  int32_t uprice() const;
  void set_uprice(int32_t value);
  private:
  int32_t _internal_uprice() const;
  void _internal_set_uprice(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Gyminfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gymid_;
  mutable std::atomic<int> _gymid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gymname_;
  mutable std::atomic<int> _gymname_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > builttime_;
  mutable std::atomic<int> _builttime_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > password_;
  mutable std::atomic<int> _password_cached_byte_size_;
  int32_t profit_;
  bool fitness_;
  bool basketball_;
  bool badminton_;
  bool swimming_;
  bool bath_;
  bool contest_;
  int32_t uprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class Student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  ~Student() override;
  explicit PROTOBUF_CONSTEXPR Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Student& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Student& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNameFieldNumber = 2,
    kStTimeFieldNumber = 5,
    kLogFieldNumber = 7,
    kGenderFieldNumber = 3,
    kAgeFieldNumber = 4,
    kBalanceFieldNumber = 6,
  };
  // repeated int32 uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  int32_t _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_uid() const;
  void _internal_add_uid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_uid();
  public:
  int32_t uid(int index) const;
  void set_uid(int index, int32_t value);
  void add_uid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_uid();

  // repeated int32 name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  private:
  int32_t _internal_name(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_name() const;
  void _internal_add_name(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_name();
  public:
  int32_t name(int index) const;
  void set_name(int index, int32_t value);
  void add_name(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_name();

  // repeated int32 st_time = 5;
  int st_time_size() const;
  private:
  int _internal_st_time_size() const;
  public:
  void clear_st_time();
  private:
  int32_t _internal_st_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_st_time() const;
  void _internal_add_st_time(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_st_time();
  public:
  int32_t st_time(int index) const;
  void set_st_time(int index, int32_t value);
  void add_st_time(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      st_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_st_time();

  // repeated .Proto.Repairlog log = 7;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::Proto::Repairlog* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
      mutable_log();
  private:
  const ::Proto::Repairlog& _internal_log(int index) const;
  ::Proto::Repairlog* _internal_add_log();
  public:
  const ::Proto::Repairlog& log(int index) const;
  ::Proto::Repairlog* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
      log() const;

  // bool gender = 3;
  void clear_gender();
  bool gender() const;
  void set_gender(bool value);
  private:
  bool _internal_gender() const;
  void _internal_set_gender(bool value);
  public:

  // int32 age = 4;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 balance = 6;
  void clear_balance();
  int32_t balance() const;
  void set_balance(int32_t value);
  private:
  int32_t _internal_balance() const;
  void _internal_set_balance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > name_;
  mutable std::atomic<int> _name_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > st_time_;
  mutable std::atomic<int> _st_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog > log_;
  bool gender_;
  int32_t age_;
  int32_t balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class Repairlog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Repairlog) */ {
 public:
  inline Repairlog() : Repairlog(nullptr) {}
  ~Repairlog() override;
  explicit PROTOBUF_CONSTEXPR Repairlog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repairlog(const Repairlog& from);
  Repairlog(Repairlog&& from) noexcept
    : Repairlog() {
    *this = ::std::move(from);
  }

  inline Repairlog& operator=(const Repairlog& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repairlog& operator=(Repairlog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Repairlog& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repairlog* internal_default_instance() {
    return reinterpret_cast<const Repairlog*>(
               &_Repairlog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Repairlog& a, Repairlog& b) {
    a.Swap(&b);
  }
  inline void Swap(Repairlog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repairlog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Repairlog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Repairlog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Repairlog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Repairlog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repairlog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Repairlog";
  }
  protected:
  explicit Repairlog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGymidFieldNumber = 1,
    kTimeFieldNumber = 2,
    kReasonFieldNumber = 3,
    kUidFieldNumber = 5,
    kSpendFieldNumber = 4,
  };
  // repeated int32 gymid = 1;
  int gymid_size() const;
  private:
  int _internal_gymid_size() const;
  public:
  void clear_gymid();
  private:
  int32_t _internal_gymid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gymid() const;
  void _internal_add_gymid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gymid();
  public:
  int32_t gymid(int index) const;
  void set_gymid(int index, int32_t value);
  void add_gymid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gymid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gymid();

  // repeated int32 time = 2;
  int time_size() const;
  private:
  int _internal_time_size() const;
  public:
  void clear_time();
  private:
  int32_t _internal_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_time() const;
  void _internal_add_time(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_time();
  public:
  int32_t time(int index) const;
  void set_time(int index, int32_t value);
  void add_time(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_time();

  // repeated int32 reason = 3;
  int reason_size() const;
  private:
  int _internal_reason_size() const;
  public:
  void clear_reason();
  private:
  int32_t _internal_reason(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_reason() const;
  void _internal_add_reason(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_reason();
  public:
  int32_t reason(int index) const;
  void set_reason(int index, int32_t value);
  void add_reason(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      reason() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_reason();

  // repeated int32 uid = 5;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  int32_t _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_uid() const;
  void _internal_add_uid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_uid();
  public:
  int32_t uid(int index) const;
  void set_uid(int index, int32_t value);
  void add_uid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_uid();

  // int32 spend = 4;
  void clear_spend();
  int32_t spend() const;
  void set_spend(int32_t value);
  private:
  int32_t _internal_spend() const;
  void _internal_set_spend(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Repairlog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gymid_;
  mutable std::atomic<int> _gymid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > time_;
  mutable std::atomic<int> _time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > reason_;
  mutable std::atomic<int> _reason_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  int32_t spend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class ChangePerson final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ChangePerson) */ {
 public:
  inline ChangePerson() : ChangePerson(nullptr) {}
  ~ChangePerson() override;
  explicit PROTOBUF_CONSTEXPR ChangePerson(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePerson(const ChangePerson& from);
  ChangePerson(ChangePerson&& from) noexcept
    : ChangePerson() {
    *this = ::std::move(from);
  }

  inline ChangePerson& operator=(const ChangePerson& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePerson& operator=(ChangePerson&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangePerson& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePerson* internal_default_instance() {
    return reinterpret_cast<const ChangePerson*>(
               &_ChangePerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChangePerson& a, ChangePerson& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePerson* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePerson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangePerson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangePerson>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangePerson& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangePerson& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePerson* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ChangePerson";
  }
  protected:
  explicit ChangePerson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kColumnFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated int32 uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  int32_t _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_uid() const;
  void _internal_add_uid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_uid();
  public:
  int32_t uid(int index) const;
  void set_uid(int index, int32_t value);
  void add_uid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_uid();

  // repeated int32 column = 2;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  private:
  int32_t _internal_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_column() const;
  void _internal_add_column(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_column();
  public:
  int32_t column(int index) const;
  void set_column(int index, int32_t value);
  void add_column(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_column();

  // repeated int32 value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  int32_t _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_value() const;
  void _internal_add_value(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_value();
  public:
  int32_t value(int index) const;
  void set_value(int index, int32_t value);
  void add_value(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:Proto.ChangePerson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > column_;
  mutable std::atomic<int> _column_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class SetPrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SetPrice) */ {
 public:
  inline SetPrice() : SetPrice(nullptr) {}
  ~SetPrice() override;
  explicit PROTOBUF_CONSTEXPR SetPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPrice(const SetPrice& from);
  SetPrice(SetPrice&& from) noexcept
    : SetPrice() {
    *this = ::std::move(from);
  }

  inline SetPrice& operator=(const SetPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPrice& operator=(SetPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPrice* internal_default_instance() {
    return reinterpret_cast<const SetPrice*>(
               &_SetPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetPrice& a, SetPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPrice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPrice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPrice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SetPrice";
  }
  protected:
  explicit SetPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGymidFieldNumber = 1,
    kUpriceFieldNumber = 2,
  };
  // repeated int32 gymid = 1;
  int gymid_size() const;
  private:
  int _internal_gymid_size() const;
  public:
  void clear_gymid();
  private:
  int32_t _internal_gymid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gymid() const;
  void _internal_add_gymid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gymid();
  public:
  int32_t gymid(int index) const;
  void set_gymid(int index, int32_t value);
  void add_gymid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gymid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gymid();

  // int32 uprice = 2;
  void clear_uprice();
  int32_t uprice() const;
  void set_uprice(int32_t value);
  private:
  int32_t _internal_uprice() const;
  void _internal_set_uprice(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SetPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gymid_;
  mutable std::atomic<int> _gymid_cached_byte_size_;
  int32_t uprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// int32 function = 1;
inline void request::clear_function() {
  function_ = 0;
}
inline int32_t request::_internal_function() const {
  return function_;
}
inline int32_t request::function() const {
  // @@protoc_insertion_point(field_get:Proto.request.function)
  return _internal_function();
}
inline void request::_internal_set_function(int32_t value) {
  
  function_ = value;
}
inline void request::set_function(int32_t value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:Proto.request.function)
}

// int32 table_name = 2;
inline void request::clear_table_name() {
  table_name_ = 0;
}
inline int32_t request::_internal_table_name() const {
  return table_name_;
}
inline int32_t request::table_name() const {
  // @@protoc_insertion_point(field_get:Proto.request.table_name)
  return _internal_table_name();
}
inline void request::_internal_set_table_name(int32_t value) {
  
  table_name_ = value;
}
inline void request::set_table_name(int32_t value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:Proto.request.table_name)
}

// repeated int32 gymid = 3;
inline int request::_internal_gymid_size() const {
  return gymid_.size();
}
inline int request::gymid_size() const {
  return _internal_gymid_size();
}
inline void request::clear_gymid() {
  gymid_.Clear();
}
inline int32_t request::_internal_gymid(int index) const {
  return gymid_.Get(index);
}
inline int32_t request::gymid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.gymid)
  return _internal_gymid(index);
}
inline void request::set_gymid(int index, int32_t value) {
  gymid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.request.gymid)
}
inline void request::_internal_add_gymid(int32_t value) {
  gymid_.Add(value);
}
inline void request::add_gymid(int32_t value) {
  _internal_add_gymid(value);
  // @@protoc_insertion_point(field_add:Proto.request.gymid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
request::_internal_gymid() const {
  return gymid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
request::gymid() const {
  // @@protoc_insertion_point(field_list:Proto.request.gymid)
  return _internal_gymid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
request::_internal_mutable_gymid() {
  return &gymid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
request::mutable_gymid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.gymid)
  return _internal_mutable_gymid();
}

// repeated .Proto.Student addstu = 4;
inline int request::_internal_addstu_size() const {
  return addstu_.size();
}
inline int request::addstu_size() const {
  return _internal_addstu_size();
}
inline void request::clear_addstu() {
  addstu_.Clear();
}
inline ::Proto::Student* request::mutable_addstu(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.addstu)
  return addstu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
request::mutable_addstu() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.addstu)
  return &addstu_;
}
inline const ::Proto::Student& request::_internal_addstu(int index) const {
  return addstu_.Get(index);
}
inline const ::Proto::Student& request::addstu(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.addstu)
  return _internal_addstu(index);
}
inline ::Proto::Student* request::_internal_add_addstu() {
  return addstu_.Add();
}
inline ::Proto::Student* request::add_addstu() {
  ::Proto::Student* _add = _internal_add_addstu();
  // @@protoc_insertion_point(field_add:Proto.request.addstu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
request::addstu() const {
  // @@protoc_insertion_point(field_list:Proto.request.addstu)
  return addstu_;
}

// repeated .Proto.Repairlog addlog = 5;
inline int request::_internal_addlog_size() const {
  return addlog_.size();
}
inline int request::addlog_size() const {
  return _internal_addlog_size();
}
inline void request::clear_addlog() {
  addlog_.Clear();
}
inline ::Proto::Repairlog* request::mutable_addlog(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.addlog)
  return addlog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
request::mutable_addlog() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.addlog)
  return &addlog_;
}
inline const ::Proto::Repairlog& request::_internal_addlog(int index) const {
  return addlog_.Get(index);
}
inline const ::Proto::Repairlog& request::addlog(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.addlog)
  return _internal_addlog(index);
}
inline ::Proto::Repairlog* request::_internal_add_addlog() {
  return addlog_.Add();
}
inline ::Proto::Repairlog* request::add_addlog() {
  ::Proto::Repairlog* _add = _internal_add_addlog();
  // @@protoc_insertion_point(field_add:Proto.request.addlog)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
request::addlog() const {
  // @@protoc_insertion_point(field_list:Proto.request.addlog)
  return addlog_;
}

// repeated .Proto.Student delstu = 6;
inline int request::_internal_delstu_size() const {
  return delstu_.size();
}
inline int request::delstu_size() const {
  return _internal_delstu_size();
}
inline void request::clear_delstu() {
  delstu_.Clear();
}
inline ::Proto::Student* request::mutable_delstu(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.delstu)
  return delstu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
request::mutable_delstu() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.delstu)
  return &delstu_;
}
inline const ::Proto::Student& request::_internal_delstu(int index) const {
  return delstu_.Get(index);
}
inline const ::Proto::Student& request::delstu(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.delstu)
  return _internal_delstu(index);
}
inline ::Proto::Student* request::_internal_add_delstu() {
  return delstu_.Add();
}
inline ::Proto::Student* request::add_delstu() {
  ::Proto::Student* _add = _internal_add_delstu();
  // @@protoc_insertion_point(field_add:Proto.request.delstu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
request::delstu() const {
  // @@protoc_insertion_point(field_list:Proto.request.delstu)
  return delstu_;
}

// repeated .Proto.Repairlog dellog = 7;
inline int request::_internal_dellog_size() const {
  return dellog_.size();
}
inline int request::dellog_size() const {
  return _internal_dellog_size();
}
inline void request::clear_dellog() {
  dellog_.Clear();
}
inline ::Proto::Repairlog* request::mutable_dellog(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.dellog)
  return dellog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
request::mutable_dellog() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.dellog)
  return &dellog_;
}
inline const ::Proto::Repairlog& request::_internal_dellog(int index) const {
  return dellog_.Get(index);
}
inline const ::Proto::Repairlog& request::dellog(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.dellog)
  return _internal_dellog(index);
}
inline ::Proto::Repairlog* request::_internal_add_dellog() {
  return dellog_.Add();
}
inline ::Proto::Repairlog* request::add_dellog() {
  ::Proto::Repairlog* _add = _internal_add_dellog();
  // @@protoc_insertion_point(field_add:Proto.request.dellog)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
request::dellog() const {
  // @@protoc_insertion_point(field_list:Proto.request.dellog)
  return dellog_;
}

// repeated .Proto.Student in = 8;
inline int request::_internal_in_size() const {
  return in_.size();
}
inline int request::in_size() const {
  return _internal_in_size();
}
inline void request::clear_in() {
  in_.Clear();
}
inline ::Proto::Student* request::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.in)
  return in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
request::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.in)
  return &in_;
}
inline const ::Proto::Student& request::_internal_in(int index) const {
  return in_.Get(index);
}
inline const ::Proto::Student& request::in(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.in)
  return _internal_in(index);
}
inline ::Proto::Student* request::_internal_add_in() {
  return in_.Add();
}
inline ::Proto::Student* request::add_in() {
  ::Proto::Student* _add = _internal_add_in();
  // @@protoc_insertion_point(field_add:Proto.request.in)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
request::in() const {
  // @@protoc_insertion_point(field_list:Proto.request.in)
  return in_;
}

// repeated .Proto.Student out = 9;
inline int request::_internal_out_size() const {
  return out_.size();
}
inline int request::out_size() const {
  return _internal_out_size();
}
inline void request::clear_out() {
  out_.Clear();
}
inline ::Proto::Student* request::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.out)
  return out_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
request::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.out)
  return &out_;
}
inline const ::Proto::Student& request::_internal_out(int index) const {
  return out_.Get(index);
}
inline const ::Proto::Student& request::out(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.out)
  return _internal_out(index);
}
inline ::Proto::Student* request::_internal_add_out() {
  return out_.Add();
}
inline ::Proto::Student* request::add_out() {
  ::Proto::Student* _add = _internal_add_out();
  // @@protoc_insertion_point(field_add:Proto.request.out)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
request::out() const {
  // @@protoc_insertion_point(field_list:Proto.request.out)
  return out_;
}

// repeated .Proto.ChangePerson changestu = 10;
inline int request::_internal_changestu_size() const {
  return changestu_.size();
}
inline int request::changestu_size() const {
  return _internal_changestu_size();
}
inline void request::clear_changestu() {
  changestu_.Clear();
}
inline ::Proto::ChangePerson* request::mutable_changestu(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.changestu)
  return changestu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ChangePerson >*
request::mutable_changestu() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.changestu)
  return &changestu_;
}
inline const ::Proto::ChangePerson& request::_internal_changestu(int index) const {
  return changestu_.Get(index);
}
inline const ::Proto::ChangePerson& request::changestu(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.changestu)
  return _internal_changestu(index);
}
inline ::Proto::ChangePerson* request::_internal_add_changestu() {
  return changestu_.Add();
}
inline ::Proto::ChangePerson* request::add_changestu() {
  ::Proto::ChangePerson* _add = _internal_add_changestu();
  // @@protoc_insertion_point(field_add:Proto.request.changestu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ChangePerson >&
request::changestu() const {
  // @@protoc_insertion_point(field_list:Proto.request.changestu)
  return changestu_;
}

// int32 uprice = 11;
inline void request::clear_uprice() {
  uprice_ = 0;
}
inline int32_t request::_internal_uprice() const {
  return uprice_;
}
inline int32_t request::uprice() const {
  // @@protoc_insertion_point(field_get:Proto.request.uprice)
  return _internal_uprice();
}
inline void request::_internal_set_uprice(int32_t value) {
  
  uprice_ = value;
}
inline void request::set_uprice(int32_t value) {
  _internal_set_uprice(value);
  // @@protoc_insertion_point(field_set:Proto.request.uprice)
}

// repeated .Proto.Gyminfo login = 12;
inline int request::_internal_login_size() const {
  return login_.size();
}
inline int request::login_size() const {
  return _internal_login_size();
}
inline void request::clear_login() {
  login_.Clear();
}
inline ::Proto::Gyminfo* request::mutable_login(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.login)
  return login_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >*
request::mutable_login() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.login)
  return &login_;
}
inline const ::Proto::Gyminfo& request::_internal_login(int index) const {
  return login_.Get(index);
}
inline const ::Proto::Gyminfo& request::login(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.login)
  return _internal_login(index);
}
inline ::Proto::Gyminfo* request::_internal_add_login() {
  return login_.Add();
}
inline ::Proto::Gyminfo* request::add_login() {
  ::Proto::Gyminfo* _add = _internal_add_login();
  // @@protoc_insertion_point(field_add:Proto.request.login)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >&
request::login() const {
  // @@protoc_insertion_point(field_list:Proto.request.login)
  return login_;
}

// repeated .Proto.Gyminfo reg = 13;
inline int request::_internal_reg_size() const {
  return reg_.size();
}
inline int request::reg_size() const {
  return _internal_reg_size();
}
inline void request::clear_reg() {
  reg_.Clear();
}
inline ::Proto::Gyminfo* request::mutable_reg(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.reg)
  return reg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >*
request::mutable_reg() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.reg)
  return &reg_;
}
inline const ::Proto::Gyminfo& request::_internal_reg(int index) const {
  return reg_.Get(index);
}
inline const ::Proto::Gyminfo& request::reg(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.reg)
  return _internal_reg(index);
}
inline ::Proto::Gyminfo* request::_internal_add_reg() {
  return reg_.Add();
}
inline ::Proto::Gyminfo* request::add_reg() {
  ::Proto::Gyminfo* _add = _internal_add_reg();
  // @@protoc_insertion_point(field_add:Proto.request.reg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >&
request::reg() const {
  // @@protoc_insertion_point(field_list:Proto.request.reg)
  return reg_;
}

// repeated .Proto.SetPrice setprice = 14;
inline int request::_internal_setprice_size() const {
  return setprice_.size();
}
inline int request::setprice_size() const {
  return _internal_setprice_size();
}
inline void request::clear_setprice() {
  setprice_.Clear();
}
inline ::Proto::SetPrice* request::mutable_setprice(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.request.setprice)
  return setprice_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SetPrice >*
request::mutable_setprice() {
  // @@protoc_insertion_point(field_mutable_list:Proto.request.setprice)
  return &setprice_;
}
inline const ::Proto::SetPrice& request::_internal_setprice(int index) const {
  return setprice_.Get(index);
}
inline const ::Proto::SetPrice& request::setprice(int index) const {
  // @@protoc_insertion_point(field_get:Proto.request.setprice)
  return _internal_setprice(index);
}
inline ::Proto::SetPrice* request::_internal_add_setprice() {
  return setprice_.Add();
}
inline ::Proto::SetPrice* request::add_setprice() {
  ::Proto::SetPrice* _add = _internal_add_setprice();
  // @@protoc_insertion_point(field_add:Proto.request.setprice)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SetPrice >&
request::setprice() const {
  // @@protoc_insertion_point(field_list:Proto.request.setprice)
  return setprice_;
}

// -------------------------------------------------------------------

// response

// int32 function = 1;
inline void response::clear_function() {
  function_ = 0;
}
inline int32_t response::_internal_function() const {
  return function_;
}
inline int32_t response::function() const {
  // @@protoc_insertion_point(field_get:Proto.response.function)
  return _internal_function();
}
inline void response::_internal_set_function(int32_t value) {
  
  function_ = value;
}
inline void response::set_function(int32_t value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:Proto.response.function)
}

// bool res = 2;
inline void response::clear_res() {
  res_ = false;
}
inline bool response::_internal_res() const {
  return res_;
}
inline bool response::res() const {
  // @@protoc_insertion_point(field_get:Proto.response.res)
  return _internal_res();
}
inline void response::_internal_set_res(bool value) {
  
  res_ = value;
}
inline void response::set_res(bool value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:Proto.response.res)
}

// int32 table_name = 3;
inline void response::clear_table_name() {
  table_name_ = 0;
}
inline int32_t response::_internal_table_name() const {
  return table_name_;
}
inline int32_t response::table_name() const {
  // @@protoc_insertion_point(field_get:Proto.response.table_name)
  return _internal_table_name();
}
inline void response::_internal_set_table_name(int32_t value) {
  
  table_name_ = value;
}
inline void response::set_table_name(int32_t value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:Proto.response.table_name)
}

// repeated int32 gymid = 4;
inline int response::_internal_gymid_size() const {
  return gymid_.size();
}
inline int response::gymid_size() const {
  return _internal_gymid_size();
}
inline void response::clear_gymid() {
  gymid_.Clear();
}
inline int32_t response::_internal_gymid(int index) const {
  return gymid_.Get(index);
}
inline int32_t response::gymid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.response.gymid)
  return _internal_gymid(index);
}
inline void response::set_gymid(int index, int32_t value) {
  gymid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.response.gymid)
}
inline void response::_internal_add_gymid(int32_t value) {
  gymid_.Add(value);
}
inline void response::add_gymid(int32_t value) {
  _internal_add_gymid(value);
  // @@protoc_insertion_point(field_add:Proto.response.gymid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
response::_internal_gymid() const {
  return gymid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
response::gymid() const {
  // @@protoc_insertion_point(field_list:Proto.response.gymid)
  return _internal_gymid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
response::_internal_mutable_gymid() {
  return &gymid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
response::mutable_gymid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.response.gymid)
  return _internal_mutable_gymid();
}

// repeated .Proto.Student stu = 5;
inline int response::_internal_stu_size() const {
  return stu_.size();
}
inline int response::stu_size() const {
  return _internal_stu_size();
}
inline void response::clear_stu() {
  stu_.Clear();
}
inline ::Proto::Student* response::mutable_stu(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.response.stu)
  return stu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >*
response::mutable_stu() {
  // @@protoc_insertion_point(field_mutable_list:Proto.response.stu)
  return &stu_;
}
inline const ::Proto::Student& response::_internal_stu(int index) const {
  return stu_.Get(index);
}
inline const ::Proto::Student& response::stu(int index) const {
  // @@protoc_insertion_point(field_get:Proto.response.stu)
  return _internal_stu(index);
}
inline ::Proto::Student* response::_internal_add_stu() {
  return stu_.Add();
}
inline ::Proto::Student* response::add_stu() {
  ::Proto::Student* _add = _internal_add_stu();
  // @@protoc_insertion_point(field_add:Proto.response.stu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Student >&
response::stu() const {
  // @@protoc_insertion_point(field_list:Proto.response.stu)
  return stu_;
}

// repeated .Proto.Repairlog log = 6;
inline int response::_internal_log_size() const {
  return log_.size();
}
inline int response::log_size() const {
  return _internal_log_size();
}
inline void response::clear_log() {
  log_.Clear();
}
inline ::Proto::Repairlog* response::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.response.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
response::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:Proto.response.log)
  return &log_;
}
inline const ::Proto::Repairlog& response::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::Proto::Repairlog& response::log(int index) const {
  // @@protoc_insertion_point(field_get:Proto.response.log)
  return _internal_log(index);
}
inline ::Proto::Repairlog* response::_internal_add_log() {
  return log_.Add();
}
inline ::Proto::Repairlog* response::add_log() {
  ::Proto::Repairlog* _add = _internal_add_log();
  // @@protoc_insertion_point(field_add:Proto.response.log)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
response::log() const {
  // @@protoc_insertion_point(field_list:Proto.response.log)
  return log_;
}

// repeated .Proto.Gyminfo gyminfo = 7;
inline int response::_internal_gyminfo_size() const {
  return gyminfo_.size();
}
inline int response::gyminfo_size() const {
  return _internal_gyminfo_size();
}
inline void response::clear_gyminfo() {
  gyminfo_.Clear();
}
inline ::Proto::Gyminfo* response::mutable_gyminfo(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.response.gyminfo)
  return gyminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >*
response::mutable_gyminfo() {
  // @@protoc_insertion_point(field_mutable_list:Proto.response.gyminfo)
  return &gyminfo_;
}
inline const ::Proto::Gyminfo& response::_internal_gyminfo(int index) const {
  return gyminfo_.Get(index);
}
inline const ::Proto::Gyminfo& response::gyminfo(int index) const {
  // @@protoc_insertion_point(field_get:Proto.response.gyminfo)
  return _internal_gyminfo(index);
}
inline ::Proto::Gyminfo* response::_internal_add_gyminfo() {
  return gyminfo_.Add();
}
inline ::Proto::Gyminfo* response::add_gyminfo() {
  ::Proto::Gyminfo* _add = _internal_add_gyminfo();
  // @@protoc_insertion_point(field_add:Proto.response.gyminfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Gyminfo >&
response::gyminfo() const {
  // @@protoc_insertion_point(field_list:Proto.response.gyminfo)
  return gyminfo_;
}

// -------------------------------------------------------------------

// Gyminfo

// repeated int32 gymid = 1;
inline int Gyminfo::_internal_gymid_size() const {
  return gymid_.size();
}
inline int Gyminfo::gymid_size() const {
  return _internal_gymid_size();
}
inline void Gyminfo::clear_gymid() {
  gymid_.Clear();
}
inline int32_t Gyminfo::_internal_gymid(int index) const {
  return gymid_.Get(index);
}
inline int32_t Gyminfo::gymid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.gymid)
  return _internal_gymid(index);
}
inline void Gyminfo::set_gymid(int index, int32_t value) {
  gymid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.gymid)
}
inline void Gyminfo::_internal_add_gymid(int32_t value) {
  gymid_.Add(value);
}
inline void Gyminfo::add_gymid(int32_t value) {
  _internal_add_gymid(value);
  // @@protoc_insertion_point(field_add:Proto.Gyminfo.gymid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::_internal_gymid() const {
  return gymid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::gymid() const {
  // @@protoc_insertion_point(field_list:Proto.Gyminfo.gymid)
  return _internal_gymid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::_internal_mutable_gymid() {
  return &gymid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::mutable_gymid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Gyminfo.gymid)
  return _internal_mutable_gymid();
}

// repeated int32 gymname = 2;
inline int Gyminfo::_internal_gymname_size() const {
  return gymname_.size();
}
inline int Gyminfo::gymname_size() const {
  return _internal_gymname_size();
}
inline void Gyminfo::clear_gymname() {
  gymname_.Clear();
}
inline int32_t Gyminfo::_internal_gymname(int index) const {
  return gymname_.Get(index);
}
inline int32_t Gyminfo::gymname(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.gymname)
  return _internal_gymname(index);
}
inline void Gyminfo::set_gymname(int index, int32_t value) {
  gymname_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.gymname)
}
inline void Gyminfo::_internal_add_gymname(int32_t value) {
  gymname_.Add(value);
}
inline void Gyminfo::add_gymname(int32_t value) {
  _internal_add_gymname(value);
  // @@protoc_insertion_point(field_add:Proto.Gyminfo.gymname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::_internal_gymname() const {
  return gymname_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::gymname() const {
  // @@protoc_insertion_point(field_list:Proto.Gyminfo.gymname)
  return _internal_gymname();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::_internal_mutable_gymname() {
  return &gymname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::mutable_gymname() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Gyminfo.gymname)
  return _internal_mutable_gymname();
}

// repeated int32 position = 3;
inline int Gyminfo::_internal_position_size() const {
  return position_.size();
}
inline int Gyminfo::position_size() const {
  return _internal_position_size();
}
inline void Gyminfo::clear_position() {
  position_.Clear();
}
inline int32_t Gyminfo::_internal_position(int index) const {
  return position_.Get(index);
}
inline int32_t Gyminfo::position(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.position)
  return _internal_position(index);
}
inline void Gyminfo::set_position(int index, int32_t value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.position)
}
inline void Gyminfo::_internal_add_position(int32_t value) {
  position_.Add(value);
}
inline void Gyminfo::add_position(int32_t value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:Proto.Gyminfo.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::position() const {
  // @@protoc_insertion_point(field_list:Proto.Gyminfo.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Gyminfo.position)
  return _internal_mutable_position();
}

// repeated int32 builttime = 4;
inline int Gyminfo::_internal_builttime_size() const {
  return builttime_.size();
}
inline int Gyminfo::builttime_size() const {
  return _internal_builttime_size();
}
inline void Gyminfo::clear_builttime() {
  builttime_.Clear();
}
inline int32_t Gyminfo::_internal_builttime(int index) const {
  return builttime_.Get(index);
}
inline int32_t Gyminfo::builttime(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.builttime)
  return _internal_builttime(index);
}
inline void Gyminfo::set_builttime(int index, int32_t value) {
  builttime_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.builttime)
}
inline void Gyminfo::_internal_add_builttime(int32_t value) {
  builttime_.Add(value);
}
inline void Gyminfo::add_builttime(int32_t value) {
  _internal_add_builttime(value);
  // @@protoc_insertion_point(field_add:Proto.Gyminfo.builttime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::_internal_builttime() const {
  return builttime_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::builttime() const {
  // @@protoc_insertion_point(field_list:Proto.Gyminfo.builttime)
  return _internal_builttime();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::_internal_mutable_builttime() {
  return &builttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::mutable_builttime() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Gyminfo.builttime)
  return _internal_mutable_builttime();
}

// int32 profit = 5;
inline void Gyminfo::clear_profit() {
  profit_ = 0;
}
inline int32_t Gyminfo::_internal_profit() const {
  return profit_;
}
inline int32_t Gyminfo::profit() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.profit)
  return _internal_profit();
}
inline void Gyminfo::_internal_set_profit(int32_t value) {
  
  profit_ = value;
}
inline void Gyminfo::set_profit(int32_t value) {
  _internal_set_profit(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.profit)
}

// repeated int32 password = 6;
inline int Gyminfo::_internal_password_size() const {
  return password_.size();
}
inline int Gyminfo::password_size() const {
  return _internal_password_size();
}
inline void Gyminfo::clear_password() {
  password_.Clear();
}
inline int32_t Gyminfo::_internal_password(int index) const {
  return password_.Get(index);
}
inline int32_t Gyminfo::password(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.password)
  return _internal_password(index);
}
inline void Gyminfo::set_password(int index, int32_t value) {
  password_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.password)
}
inline void Gyminfo::_internal_add_password(int32_t value) {
  password_.Add(value);
}
inline void Gyminfo::add_password(int32_t value) {
  _internal_add_password(value);
  // @@protoc_insertion_point(field_add:Proto.Gyminfo.password)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::_internal_password() const {
  return password_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Gyminfo::password() const {
  // @@protoc_insertion_point(field_list:Proto.Gyminfo.password)
  return _internal_password();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::_internal_mutable_password() {
  return &password_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Gyminfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Gyminfo.password)
  return _internal_mutable_password();
}

// bool fitness = 7;
inline void Gyminfo::clear_fitness() {
  fitness_ = false;
}
inline bool Gyminfo::_internal_fitness() const {
  return fitness_;
}
inline bool Gyminfo::fitness() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.fitness)
  return _internal_fitness();
}
inline void Gyminfo::_internal_set_fitness(bool value) {
  
  fitness_ = value;
}
inline void Gyminfo::set_fitness(bool value) {
  _internal_set_fitness(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.fitness)
}

// bool basketball = 8;
inline void Gyminfo::clear_basketball() {
  basketball_ = false;
}
inline bool Gyminfo::_internal_basketball() const {
  return basketball_;
}
inline bool Gyminfo::basketball() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.basketball)
  return _internal_basketball();
}
inline void Gyminfo::_internal_set_basketball(bool value) {
  
  basketball_ = value;
}
inline void Gyminfo::set_basketball(bool value) {
  _internal_set_basketball(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.basketball)
}

// bool badminton = 9;
inline void Gyminfo::clear_badminton() {
  badminton_ = false;
}
inline bool Gyminfo::_internal_badminton() const {
  return badminton_;
}
inline bool Gyminfo::badminton() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.badminton)
  return _internal_badminton();
}
inline void Gyminfo::_internal_set_badminton(bool value) {
  
  badminton_ = value;
}
inline void Gyminfo::set_badminton(bool value) {
  _internal_set_badminton(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.badminton)
}

// bool swimming = 10;
inline void Gyminfo::clear_swimming() {
  swimming_ = false;
}
inline bool Gyminfo::_internal_swimming() const {
  return swimming_;
}
inline bool Gyminfo::swimming() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.swimming)
  return _internal_swimming();
}
inline void Gyminfo::_internal_set_swimming(bool value) {
  
  swimming_ = value;
}
inline void Gyminfo::set_swimming(bool value) {
  _internal_set_swimming(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.swimming)
}

// bool bath = 11;
inline void Gyminfo::clear_bath() {
  bath_ = false;
}
inline bool Gyminfo::_internal_bath() const {
  return bath_;
}
inline bool Gyminfo::bath() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.bath)
  return _internal_bath();
}
inline void Gyminfo::_internal_set_bath(bool value) {
  
  bath_ = value;
}
inline void Gyminfo::set_bath(bool value) {
  _internal_set_bath(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.bath)
}

// bool contest = 12;
inline void Gyminfo::clear_contest() {
  contest_ = false;
}
inline bool Gyminfo::_internal_contest() const {
  return contest_;
}
inline bool Gyminfo::contest() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.contest)
  return _internal_contest();
}
inline void Gyminfo::_internal_set_contest(bool value) {
  
  contest_ = value;
}
inline void Gyminfo::set_contest(bool value) {
  _internal_set_contest(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.contest)
}

// int32 uprice = 13;
inline void Gyminfo::clear_uprice() {
  uprice_ = 0;
}
inline int32_t Gyminfo::_internal_uprice() const {
  return uprice_;
}
inline int32_t Gyminfo::uprice() const {
  // @@protoc_insertion_point(field_get:Proto.Gyminfo.uprice)
  return _internal_uprice();
}
inline void Gyminfo::_internal_set_uprice(int32_t value) {
  
  uprice_ = value;
}
inline void Gyminfo::set_uprice(int32_t value) {
  _internal_set_uprice(value);
  // @@protoc_insertion_point(field_set:Proto.Gyminfo.uprice)
}

// -------------------------------------------------------------------

// Student

// repeated int32 uid = 1;
inline int Student::_internal_uid_size() const {
  return uid_.size();
}
inline int Student::uid_size() const {
  return _internal_uid_size();
}
inline void Student::clear_uid() {
  uid_.Clear();
}
inline int32_t Student::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline int32_t Student::uid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Student.uid)
  return _internal_uid(index);
}
inline void Student::set_uid(int index, int32_t value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Student.uid)
}
inline void Student::_internal_add_uid(int32_t value) {
  uid_.Add(value);
}
inline void Student::add_uid(int32_t value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:Proto.Student.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::uid() const {
  // @@protoc_insertion_point(field_list:Proto.Student.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Student.uid)
  return _internal_mutable_uid();
}

// repeated int32 name = 2;
inline int Student::_internal_name_size() const {
  return name_.size();
}
inline int Student::name_size() const {
  return _internal_name_size();
}
inline void Student::clear_name() {
  name_.Clear();
}
inline int32_t Student::_internal_name(int index) const {
  return name_.Get(index);
}
inline int32_t Student::name(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Student.name)
  return _internal_name(index);
}
inline void Student::set_name(int index, int32_t value) {
  name_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Student.name)
}
inline void Student::_internal_add_name(int32_t value) {
  name_.Add(value);
}
inline void Student::add_name(int32_t value) {
  _internal_add_name(value);
  // @@protoc_insertion_point(field_add:Proto.Student.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::_internal_name() const {
  return name_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::name() const {
  // @@protoc_insertion_point(field_list:Proto.Student.name)
  return _internal_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::_internal_mutable_name() {
  return &name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Student.name)
  return _internal_mutable_name();
}

// bool gender = 3;
inline void Student::clear_gender() {
  gender_ = false;
}
inline bool Student::_internal_gender() const {
  return gender_;
}
inline bool Student::gender() const {
  // @@protoc_insertion_point(field_get:Proto.Student.gender)
  return _internal_gender();
}
inline void Student::_internal_set_gender(bool value) {
  
  gender_ = value;
}
inline void Student::set_gender(bool value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Proto.Student.gender)
}

// int32 age = 4;
inline void Student::clear_age() {
  age_ = 0;
}
inline int32_t Student::_internal_age() const {
  return age_;
}
inline int32_t Student::age() const {
  // @@protoc_insertion_point(field_get:Proto.Student.age)
  return _internal_age();
}
inline void Student::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void Student::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Proto.Student.age)
}

// repeated int32 st_time = 5;
inline int Student::_internal_st_time_size() const {
  return st_time_.size();
}
inline int Student::st_time_size() const {
  return _internal_st_time_size();
}
inline void Student::clear_st_time() {
  st_time_.Clear();
}
inline int32_t Student::_internal_st_time(int index) const {
  return st_time_.Get(index);
}
inline int32_t Student::st_time(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Student.st_time)
  return _internal_st_time(index);
}
inline void Student::set_st_time(int index, int32_t value) {
  st_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Student.st_time)
}
inline void Student::_internal_add_st_time(int32_t value) {
  st_time_.Add(value);
}
inline void Student::add_st_time(int32_t value) {
  _internal_add_st_time(value);
  // @@protoc_insertion_point(field_add:Proto.Student.st_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::_internal_st_time() const {
  return st_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::st_time() const {
  // @@protoc_insertion_point(field_list:Proto.Student.st_time)
  return _internal_st_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::_internal_mutable_st_time() {
  return &st_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::mutable_st_time() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Student.st_time)
  return _internal_mutable_st_time();
}

// int32 balance = 6;
inline void Student::clear_balance() {
  balance_ = 0;
}
inline int32_t Student::_internal_balance() const {
  return balance_;
}
inline int32_t Student::balance() const {
  // @@protoc_insertion_point(field_get:Proto.Student.balance)
  return _internal_balance();
}
inline void Student::_internal_set_balance(int32_t value) {
  
  balance_ = value;
}
inline void Student::set_balance(int32_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:Proto.Student.balance)
}

// repeated .Proto.Repairlog log = 7;
inline int Student::_internal_log_size() const {
  return log_.size();
}
inline int Student::log_size() const {
  return _internal_log_size();
}
inline void Student::clear_log() {
  log_.Clear();
}
inline ::Proto::Repairlog* Student::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Student.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >*
Student::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Student.log)
  return &log_;
}
inline const ::Proto::Repairlog& Student::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::Proto::Repairlog& Student::log(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Student.log)
  return _internal_log(index);
}
inline ::Proto::Repairlog* Student::_internal_add_log() {
  return log_.Add();
}
inline ::Proto::Repairlog* Student::add_log() {
  ::Proto::Repairlog* _add = _internal_add_log();
  // @@protoc_insertion_point(field_add:Proto.Student.log)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Repairlog >&
Student::log() const {
  // @@protoc_insertion_point(field_list:Proto.Student.log)
  return log_;
}

// -------------------------------------------------------------------

// Repairlog

// repeated int32 gymid = 1;
inline int Repairlog::_internal_gymid_size() const {
  return gymid_.size();
}
inline int Repairlog::gymid_size() const {
  return _internal_gymid_size();
}
inline void Repairlog::clear_gymid() {
  gymid_.Clear();
}
inline int32_t Repairlog::_internal_gymid(int index) const {
  return gymid_.Get(index);
}
inline int32_t Repairlog::gymid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Repairlog.gymid)
  return _internal_gymid(index);
}
inline void Repairlog::set_gymid(int index, int32_t value) {
  gymid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Repairlog.gymid)
}
inline void Repairlog::_internal_add_gymid(int32_t value) {
  gymid_.Add(value);
}
inline void Repairlog::add_gymid(int32_t value) {
  _internal_add_gymid(value);
  // @@protoc_insertion_point(field_add:Proto.Repairlog.gymid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::_internal_gymid() const {
  return gymid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::gymid() const {
  // @@protoc_insertion_point(field_list:Proto.Repairlog.gymid)
  return _internal_gymid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::_internal_mutable_gymid() {
  return &gymid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::mutable_gymid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Repairlog.gymid)
  return _internal_mutable_gymid();
}

// repeated int32 time = 2;
inline int Repairlog::_internal_time_size() const {
  return time_.size();
}
inline int Repairlog::time_size() const {
  return _internal_time_size();
}
inline void Repairlog::clear_time() {
  time_.Clear();
}
inline int32_t Repairlog::_internal_time(int index) const {
  return time_.Get(index);
}
inline int32_t Repairlog::time(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Repairlog.time)
  return _internal_time(index);
}
inline void Repairlog::set_time(int index, int32_t value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Repairlog.time)
}
inline void Repairlog::_internal_add_time(int32_t value) {
  time_.Add(value);
}
inline void Repairlog::add_time(int32_t value) {
  _internal_add_time(value);
  // @@protoc_insertion_point(field_add:Proto.Repairlog.time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::_internal_time() const {
  return time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::time() const {
  // @@protoc_insertion_point(field_list:Proto.Repairlog.time)
  return _internal_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::_internal_mutable_time() {
  return &time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Repairlog.time)
  return _internal_mutable_time();
}

// repeated int32 reason = 3;
inline int Repairlog::_internal_reason_size() const {
  return reason_.size();
}
inline int Repairlog::reason_size() const {
  return _internal_reason_size();
}
inline void Repairlog::clear_reason() {
  reason_.Clear();
}
inline int32_t Repairlog::_internal_reason(int index) const {
  return reason_.Get(index);
}
inline int32_t Repairlog::reason(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Repairlog.reason)
  return _internal_reason(index);
}
inline void Repairlog::set_reason(int index, int32_t value) {
  reason_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Repairlog.reason)
}
inline void Repairlog::_internal_add_reason(int32_t value) {
  reason_.Add(value);
}
inline void Repairlog::add_reason(int32_t value) {
  _internal_add_reason(value);
  // @@protoc_insertion_point(field_add:Proto.Repairlog.reason)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::_internal_reason() const {
  return reason_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::reason() const {
  // @@protoc_insertion_point(field_list:Proto.Repairlog.reason)
  return _internal_reason();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::_internal_mutable_reason() {
  return &reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::mutable_reason() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Repairlog.reason)
  return _internal_mutable_reason();
}

// int32 spend = 4;
inline void Repairlog::clear_spend() {
  spend_ = 0;
}
inline int32_t Repairlog::_internal_spend() const {
  return spend_;
}
inline int32_t Repairlog::spend() const {
  // @@protoc_insertion_point(field_get:Proto.Repairlog.spend)
  return _internal_spend();
}
inline void Repairlog::_internal_set_spend(int32_t value) {
  
  spend_ = value;
}
inline void Repairlog::set_spend(int32_t value) {
  _internal_set_spend(value);
  // @@protoc_insertion_point(field_set:Proto.Repairlog.spend)
}

// repeated int32 uid = 5;
inline int Repairlog::_internal_uid_size() const {
  return uid_.size();
}
inline int Repairlog::uid_size() const {
  return _internal_uid_size();
}
inline void Repairlog::clear_uid() {
  uid_.Clear();
}
inline int32_t Repairlog::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline int32_t Repairlog::uid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Repairlog.uid)
  return _internal_uid(index);
}
inline void Repairlog::set_uid(int index, int32_t value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Repairlog.uid)
}
inline void Repairlog::_internal_add_uid(int32_t value) {
  uid_.Add(value);
}
inline void Repairlog::add_uid(int32_t value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:Proto.Repairlog.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Repairlog::uid() const {
  // @@protoc_insertion_point(field_list:Proto.Repairlog.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Repairlog::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Repairlog.uid)
  return _internal_mutable_uid();
}

// -------------------------------------------------------------------

// ChangePerson

// repeated int32 uid = 1;
inline int ChangePerson::_internal_uid_size() const {
  return uid_.size();
}
inline int ChangePerson::uid_size() const {
  return _internal_uid_size();
}
inline void ChangePerson::clear_uid() {
  uid_.Clear();
}
inline int32_t ChangePerson::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline int32_t ChangePerson::uid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ChangePerson.uid)
  return _internal_uid(index);
}
inline void ChangePerson::set_uid(int index, int32_t value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.ChangePerson.uid)
}
inline void ChangePerson::_internal_add_uid(int32_t value) {
  uid_.Add(value);
}
inline void ChangePerson::add_uid(int32_t value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:Proto.ChangePerson.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ChangePerson::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ChangePerson::uid() const {
  // @@protoc_insertion_point(field_list:Proto.ChangePerson.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ChangePerson::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ChangePerson::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ChangePerson.uid)
  return _internal_mutable_uid();
}

// repeated int32 column = 2;
inline int ChangePerson::_internal_column_size() const {
  return column_.size();
}
inline int ChangePerson::column_size() const {
  return _internal_column_size();
}
inline void ChangePerson::clear_column() {
  column_.Clear();
}
inline int32_t ChangePerson::_internal_column(int index) const {
  return column_.Get(index);
}
inline int32_t ChangePerson::column(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ChangePerson.column)
  return _internal_column(index);
}
inline void ChangePerson::set_column(int index, int32_t value) {
  column_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.ChangePerson.column)
}
inline void ChangePerson::_internal_add_column(int32_t value) {
  column_.Add(value);
}
inline void ChangePerson::add_column(int32_t value) {
  _internal_add_column(value);
  // @@protoc_insertion_point(field_add:Proto.ChangePerson.column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ChangePerson::_internal_column() const {
  return column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ChangePerson::column() const {
  // @@protoc_insertion_point(field_list:Proto.ChangePerson.column)
  return _internal_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ChangePerson::_internal_mutable_column() {
  return &column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ChangePerson::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ChangePerson.column)
  return _internal_mutable_column();
}

// repeated int32 value = 3;
inline int ChangePerson::_internal_value_size() const {
  return value_.size();
}
inline int ChangePerson::value_size() const {
  return _internal_value_size();
}
inline void ChangePerson::clear_value() {
  value_.Clear();
}
inline int32_t ChangePerson::_internal_value(int index) const {
  return value_.Get(index);
}
inline int32_t ChangePerson::value(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ChangePerson.value)
  return _internal_value(index);
}
inline void ChangePerson::set_value(int index, int32_t value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.ChangePerson.value)
}
inline void ChangePerson::_internal_add_value(int32_t value) {
  value_.Add(value);
}
inline void ChangePerson::add_value(int32_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:Proto.ChangePerson.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ChangePerson::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ChangePerson::value() const {
  // @@protoc_insertion_point(field_list:Proto.ChangePerson.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ChangePerson::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ChangePerson::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ChangePerson.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// SetPrice

// repeated int32 gymid = 1;
inline int SetPrice::_internal_gymid_size() const {
  return gymid_.size();
}
inline int SetPrice::gymid_size() const {
  return _internal_gymid_size();
}
inline void SetPrice::clear_gymid() {
  gymid_.Clear();
}
inline int32_t SetPrice::_internal_gymid(int index) const {
  return gymid_.Get(index);
}
inline int32_t SetPrice::gymid(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SetPrice.gymid)
  return _internal_gymid(index);
}
inline void SetPrice::set_gymid(int index, int32_t value) {
  gymid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.SetPrice.gymid)
}
inline void SetPrice::_internal_add_gymid(int32_t value) {
  gymid_.Add(value);
}
inline void SetPrice::add_gymid(int32_t value) {
  _internal_add_gymid(value);
  // @@protoc_insertion_point(field_add:Proto.SetPrice.gymid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetPrice::_internal_gymid() const {
  return gymid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetPrice::gymid() const {
  // @@protoc_insertion_point(field_list:Proto.SetPrice.gymid)
  return _internal_gymid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetPrice::_internal_mutable_gymid() {
  return &gymid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetPrice::mutable_gymid() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SetPrice.gymid)
  return _internal_mutable_gymid();
}

// int32 uprice = 2;
inline void SetPrice::clear_uprice() {
  uprice_ = 0;
}
inline int32_t SetPrice::_internal_uprice() const {
  return uprice_;
}
inline int32_t SetPrice::uprice() const {
  // @@protoc_insertion_point(field_get:Proto.SetPrice.uprice)
  return _internal_uprice();
}
inline void SetPrice::_internal_set_uprice(int32_t value) {
  
  uprice_ = value;
}
inline void SetPrice::set_uprice(int32_t value) {
  _internal_set_uprice(value);
  // @@protoc_insertion_point(field_set:Proto.SetPrice.uprice)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
